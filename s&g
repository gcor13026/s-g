#include "opencv2/core/core.hpp"
#include "opencv2/contrib/contrib.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/opencv.hpp"
#include <stdio.h>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>

#define frame_inicio 30
#define frame_final 2300
#define PATH_RGB "/imatge/gcordova/workspace/opencv/fotos_videos/frontal-low/image/seq_"
#define PATH_DEPTH "/imatge/gcordova/workspace/opencv/fotos_videos/frontal-low/depth/seq_"

#define ANGULO_ROTACION -90
//----------------------definir variables de la ROI2------------------------------------------
#define puproi2 (134, 133) //punto superior de la roi2
#define pdownroi2 (330, 532) //punto inferior de la roi2
#define	alfa 1 //se utiliza alfa y beta para mover el offset y centrar la roi2 en la puerta
#define beta 1

//----------------------definir variables de la IMAGEN------------------------------------------
#define pcero (0,0) //punto superior cero de la imagen
#define pdownihoriz (640,480) //punto  inferior de la imagen horizontal
  
//----------------------definir variables de umbral y ventana------------------------------------------
#define umbral 10
#define ventana 5
//----------------------definir variables a,b (aplicados en del depth)------------------------------------------
#define a 47 //a pasado la puerta
#define b 70 //fuera de la sala
//----------------------definir variables de la ROIab------------------------------------------
#define a1 (178,606) //para dibujar la linea en la seccion a (pasado la puerta, dentro de la sala)
#define a2 (318,579)
#define b1 (168,509) //para dibujar la linea en la seccion b (cerca de la pared)
#define b2 (305,487)


using namespace std;
using namespace cv;

/** Function Headers */


Mat rotate(Mat src, double angle);
double angle(cv::Point pt1, cv::Point pt2, cv::Point pt0);
/** Global variables */

 struct datos {
	int frame;
	Rect rectangulo;
	Rect intersec;
	int detec;
	int direccion;
	int detReal;
	float media_depth;
	float suav_depth;
 };


cv::Rect roi2;

double angle(cv::Point pt1, cv::Point pt2, cv::Point pt0)
{
	double dx1 = pt1.x - pt0.x;
	double dy1 = pt1.y - pt0.y;
	double dx2 = pt2.x - pt0.x;
	double dy2 = pt2.y - pt0.y;
	return (dx1*dx2 + dy1*dy2) / sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}
Mat rotate(Mat src, double angle)
{

    Mat rot;
    Point2f center(src.cols/2.0, src.rows/2.0);
    Mat r = getRotationMatrix2D(center, angle, 1.0);
    cv::Rect bbox = cv::RotatedRect(center,src.size(), angle).boundingRect();
    // adjust transformation matrix
    r.at<double>(0,2) += bbox.width/2.0 - center.x;
    r.at<double>(1,2) += bbox.height/2.0 - center.y;
    warpAffine(src, rot, r, bbox.size());
    return rot;

}

 /*funcion main */
 int main( int argc, const char** argv )
 {

	vector<datos> media;
	datos dato;
	if( argc != 1)
	{
		cout <<" Usage: display_image ImageToLoadAndDisplay" << endl;
		return -1;
	}
//---------------------------------------------------------------------------------------------------
// Carga de imagenes
//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//Declarar variables
//S&G utilización de BackgroundSubtractorMOG
//---------------------------------------------------------------------------------------------------
		Mat fgMask, maskdepth, maskmedia;
		cv::BackgroundSubtractorMOG mog;
//--------------------------------------------------------------------------------------------------
	Mat image, image_depth;
	for(int i=frame_inicio;i< frame_final; i++)
	{
		dato.frame = i; // cargar UNA imagen de la carpeta en imgname y completa la ruta
		string imgname=PATH_RGB;
		char cbuff[20];
		sprintf (cbuff, "%06d", i); //variar los 6 ceros
		imgname.append(cbuff);
		imgname.append(".png");
		image = imread(imgname , CV_LOAD_IMAGE_COLOR);   // lee la imagen
//---------------------------------------------------------------------------------------------------
// Carga de imagenes depth
//---------------------------------------------------------------------------------------------------
		string imgname2= PATH_DEPTH;
		imgname2.append(cbuff);
		imgname2.append(".png");
		image_depth = imread(imgname2 ,  CV_LOAD_IMAGE_ANYCOLOR | CV_LOAD_IMAGE_ANYDEPTH);   // lee la imagen

//---------------------------------------------------------------------------------------------------
// inicio del Pre Procesado
//---------------------------------------------------------------------------------------------------
		      if( !image.empty() && !image_depth.empty())
			{
				Mat rot, rot_depth;
				rot = rotate(image, ANGULO_ROTACION); // llamada de la funcion de rotacion de imagen
				image=rot;
//---------------------------------------------------------------------------------------------------
// ROI
//---------------------------------------------------------------------------------------------------

				if(i==frame_inicio )
				{ 	//intermedios 5-6
					Point pt1 puproi2;
					Point pt4 pdownroi2;
					cv::Rect roi(pt1.x,pt1.y,pt4.x-pt1.x,pt4.y-pt1.y);
					roi2 = roi;
					cv::Size deltaSize( roi2.width * 0.1, roi2.height * 0.1 );
					roi2 -= deltaSize;
					cv::Point offset( alfa*deltaSize.width, beta*deltaSize.height);
					roi2 -= deltaSize;
					roi2 += offset;
//					cout << "area roi "<< roi.area()<< "area roi 2 "<< roi2.area()<<std::endl ;
				}
//				rectangle(image, roi2.tl(), roi2.br(), cv::Scalar(0,255,0), 2);


//---------------------------------------------------------------------------------------------------
//inicio del Procesado
//hog
//---------------------------------------------------------------------------------------------------
				Mat image2;
				HOGDescriptor hog;
				image.convertTo(image2, -1, 1, 80); //alpha value [1.0-3.0]: 1 * beta value [0-100]: 50
				image=image2;
				Mat blurred(image);
				medianBlur(blurred, blurred, 5);
//---------------------------------------------------------------------------------------------------
//inicio del Procesado
//S&G utilización de BackgroundSubtractorMOG
//---------------------------------------------------------------------------------------------------

				mog(image, fgMask, 0.01);
/*				imshow("procesing video ", fgMask);
				if (waitKey(17) == 27) // se puede cambiar en funcion de mi tiempo de procesado deberia bajarlo
				{
					waitKey(0);
				}
*/
//    	        cout << "(^.^)" << fgMask.channels()<< std::endl ;
				vector<Rect> found, found_filtered;
				hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());
				hog.detectMultiScale(image, found, 0, Size(6,6), Size(3,3), 1.05, 1);
				size_t i, j;
				for (i=0; i<found.size(); i++) //FILTRA Y GUARDA LOS DATOS DE LA DETECION+CLASIFICACION
				{
					Rect r = found[i];// muestra [anchuraxaltura from(x,y)]
					for (j=0; j<found.size(); j++)
					{
						if (j!=i && (r & found[j])==r)
							{
							break;
							}
					}
					if (j==found.size())
					{
						found_filtered.push_back(r);
					}
				//	rectangle(image, r.tl(), r.br(), cv::Scalar(255,0,0), 2);
				}


				for (i=0; i<found_filtered.size(); i++) //MUESTRA EL REGTANGULO DE LA DETECION+CLASIFICACION
				{
					Rect r = found_filtered[i];
					r.x += cvRound(r.width*0.1);
					r.width = cvRound(r.width*0.8);
					r.y += cvRound(r.height*0.06);
					r.height = cvRound(r.height*0.9);

//					rectangle(image, r.tl(), r.br(), cv::Scalar(0,255,0), 2);
				}
				if(found_filtered.size()>=1) //Existe una detección ?
				{
					Rect mayor=found_filtered[0];

					for(i=1;i<found_filtered.size(); i++) //Miramos para todas las detecciones
					{
						if(found_filtered[i].area() > mayor.area())
						{
							mayor = found_filtered[i];
						}
					}
					if( mayor.area() > roi2.area() ) //Guardamos los que cumplen 0.4*ROI
					{
						dato.rectangulo = mayor;
						dato.detec = found_filtered.size();

					}
					else
					{
						Point pt0 (0,0);
						cv::Rect cerO(pt0.x,pt0.y,pt0.x-pt0.x,pt0.y-pt0.y);
						dato.rectangulo= cerO;
						dato.detec=found_filtered.size();
					}
				}
				else // no existe deteccion
				{
					Point pt0 (0,0);
					cv::Rect cerO(pt0.x,pt0.y,pt0.x-pt0.x,pt0.y-pt0.y);
					dato.rectangulo= cerO;
					dato.detec=0;
				}

			//	rectangle(image, dato.rectangulo.tl(), dato.rectangulo.br(), cv::Scalar(0,0,255), 2);

//---------------------------------------------------------------------------------------------------
// Rotar el DEPTH
//---------------------------------------------------------------------------------------------------
				rot_depth=rotate(image_depth, ANGULO_ROTACION );
				image_depth=rot_depth;
//---------------------------------------------------------------------------------------------------
// Distancia DEPTH
//---------------------------------------------------------------------------------------------------
				double min;
				double max;
				cv::minMaxIdx(image_depth, &min, &max);
				cv::Mat adjMap;
				// Histogram Equalization
				float scale = 255 / (max-min);
				// expand your range to 0..255. Similar to histEq();
				image_depth.convertTo(adjMap,CV_8UC1,scale, -min*scale);
//    	        cout << "2(^.^)" << adjMap.channels()<< std::endl ;
//---------------------------------------------------------------------------------------------------
// Media de distacias DEPTH del regtangulo detectado en RGB (HOG+SVM)
//---------------------------------------------------------------------------------------------------
				if(dato.rectangulo.area()!=0)
				{
//					rectangle(image, dato.rectangulo.tl(), dato.rectangulo.br(), cv::Scalar(0,0,255), 2);
					Point pt1 pcero;
					Point pt4 pdownihoriz;
					cv::Rect recmat(pt1.x,pt1.y,pt4.x-pt1.x,pt4.y-pt1.y);

//mejor presentacion a la hora de ver el rectangulo
					cv::Size deltaSize( dato.rectangulo.width * 0.4, dato.rectangulo.height * 0.2);
					cv::Point offset( deltaSize.width/2, deltaSize.height/2);
					dato.rectangulo -= deltaSize;
					dato.rectangulo += offset;
////interseccion de la imagen y el rectangulo de deteccion.
					dato.intersec= dato.rectangulo & recmat;
//					rectangle(image, dato.rectangulo.tl(), dato.rectangulo.br(), cv::Scalar(255,200,255), 2);
//---------------------------------------------------------------------------------------------------
//inicio del Procesado
//S&G utilización de BackgroundSubtractorMOG
//---------------------------------------------------------------------------------------------------

//aplicar la mascara al dato.rectangulo??? luego pasar dato.rectangulo a depth para que haga la media

					Mat mascara(image.rows,image.cols, CV_8UC1,Scalar(0,0,0));
					rectangle(mascara, dato.intersec.tl(), dato.intersec.br(),cv::Scalar(255,255,255), -1);

					//void multiply(InputArray src1, InputArray src2, OutputArray dst, double scale=1, int dtype=-1 )
					multiply(fgMask , mascara, maskdepth, 1, -1 );
					/*imshow("mascara", maskdepth);
					if (waitKey(1) == 27)
					{// se puede cambiar en funcion de mi tiempo de procesado deberia bajarlo
						waitKey(0);
					}
					*/
//					rectangle(image, dato.intersec.tl(), dato.intersec.br(), cv::Scalar(0,200,200), 2);
					Point centro (dato.intersec.x+dato.intersec.width/2 , dato.intersec.y+dato.intersec.height/2);
					circle(image, centro, 2, Scalar(0,200,200), 3);
					Point rectab1 b1;
					Point rectab2 b2;
					Point rectaa1 a1;
					Point rectaa2 a2;
					line(image, rectab1, rectab2, Scalar( 255, 0, 255) , 1, 8, 0);
					line(image, rectaa1, rectaa2, Scalar( 255, 0, 255) , 1, 8, 0);
//					rectangle(image, dato.intersec.tl(), dato.intersec.br(), cv::Scalar(255,0,0), 2);
					multiply(adjMap , maskdepth, maskmedia, 1, -1 );
//					cv::Scalar tempVal=mean(adjMap(dato.intersec));
					cv::Scalar tempVal=mean(adjMap,maskmedia);
//				cout << "tempVal"<<tempVal  <<std::endl ;
					if ((tempVal.val[0]> a && tempVal.val[0]< b) && (centro.x>(roi2.x+30) && centro.x< ((roi2.x+roi2.width)-30)))
					{
						dato.media_depth = tempVal.val[0];

					}
					else
					{
						dato.media_depth=0;
						Point pt0 (0,0);
						cv::Rect zero(pt0.x,pt0.y,pt0.x-pt0.x,pt0.y-pt0.y);
						dato.intersec =zero;
					}
				}
				else
				{
					dato.media_depth=0;
					Point pt0 (0,0);
					cv::Rect zero(pt0.x,pt0.y,pt0.x-pt0.x,pt0.y-pt0.y);
					dato.intersec =zero;
				}
				media.push_back(dato); //guardo el struct dentro del vetor de media
				rectangle(image, dato.intersec.tl(), dato.intersec.br(), cv::Scalar(0,255,0), 2);
			//	rectangle(image, roi2.tl(), roi2.br(), cv::Scalar(255,255,0), 2);
//-----------------------------------------------------------------------------------------------------
//Muestra la deccion HOG y la clasificacion SVM marada en un regtangulo verde
//-----------------------------------------------------------------------------------------------------
/*				string box_text_1 = format("frame = %d ", dato.frame);
				int pos_x1 = 50;
				int pos_y1 = 50;
				putText(image, box_text_1, Point(pos_x1, pos_y1), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
				imshow("video capture", image);*/
//				imshow("video capture DEPTH", image_depth); //para ver las detecciones
//-----------------------------------------------------------------------------------------------------
// con Esc PARO la reproduccion y con SPACE continuo
//-----------------------------------------------------------------------------------------------------
/*			if (waitKey(1) == 27)
				{// se puede cambiar en funcion de mi tiempo de procesado deberia bajarlo
					waitKey(0);
				}*/
			}
		    else
				{
					printf(" --(!) No imagen -- Break!");
				}
		}

	//-----------------------------------------------------------------------------------------------------
	// EVALUACION DE DATOS
	//-----------------------------------------------------------------------------------------------------

	//-----------------------------------------------------------------------------------------------------
	// El suavisado
	//-----------------------------------------------------------------------------------------------------
		for(unsigned int j=0;j<ventana; j++)
			{
				media[j].suav_depth= media[j].media_depth; // guardo los primero valores de la ventana iguales
			}
		for(unsigned int j=ventana;j<media.size()+1; j++) //calculo la media con una ventana fija que se deplazara por todo el vector de restangulo(areas)
			{
				float suma=0.0;
				for(unsigned int n=j-ventana;n<j; n++)
					{
					suma+=media[n].media_depth;
					}
				media[j-1].suav_depth= suma/ventana;
			}


	//-----------------------------------------------------------------------------------------------------
	//Encontrar personas
	//-----------------------------------------------------------------------------------------------------
		int contdifcero=0;
		int persona=0;
		for(unsigned int k=0;k<media.size(); k++)
		{
			media[k].detReal=0;
			if (media[k].suav_depth != 0.0) // para el campo de la media de areas  difernte de cero genero un contador
			{
				contdifcero++;
			}
			else
			{
				if(contdifcero> umbral)//si el contador es mayor que 40 dire que hay una persona
				{
					persona++;
					for(unsigned int i =k-1; i>k-contdifcero-1;i--)
					{
						media[i].detReal=persona;
					}
				}
				contdifcero=0;
			}
			//cout << "media[k].detReal(^.^)"<< media[k].detReal<<std::endl ;
		}

	//-----------------------------------------------------------------------------------------------------
	//Encontrar la direccion
	//-----------------------------------------------------------------------------------------------------
		int  dir=0;
		int anterior =0;
		media[0].direccion = 0;
		for(unsigned int l=1;l<media.size(); l++)
		{
			if (media[l].detReal != 0)
			{
				if (media[l].suav_depth > media[l-1].suav_depth)
				{
					dir++;
					//cout << "frame="<< media[i].frame << " dir="<< dir << std::endl ;
				}
				else if (media[l].suav_depth < media[l-1].suav_depth)
				{
					dir--;
				}
				anterior++;
			}
			else if (media[l].detReal == 0 && media[l-1].detReal != 0)
			{
				if (dir>0)
				{
					for(unsigned int i=l-1; i>l-anterior-1;i--)
					{
						media[i].direccion = -1; //-1 = sale
					}
				}
				else if (dir<0)
				{
					for(unsigned int i =l-1; i>l-anterior-1;i--)
					{
						media[i].direccion = 1; //1 = entra
					}
				}
				else
				{
					for(unsigned int i =l-1; i>l-anterior-1;i--)
						{
							media[i].direccion = 0;
						}
				}
				anterior=0;
				dir=0;
				media[l].direccion = 0;
			}
			else
			{
				media[l].direccion = 0;
				anterior=0;
				dir=0;
			}
			//cout << "frame="<< media[i].frame << " dir="<< dir << std::endl ;
		}



	//-----------------------------------------------------------------------------------------------------
	//Mostrar Datos en texto
	//-----------------------------------------------------------------------------------------------------

	//	for(unsigned int i=0;i<media.size(); i++)
	//			{
	//			cout << "frame="<< media[i].frame << " persona="<< media[i].detReal << " media direccion ="<< media[i].direccion << " media suavisado ="<< media[i].suav_depth<< std::endl ;
	//			}

	//-----------------------------------------------------------------------------------------------------
	//Mostrar Datos
	//-----------------------------------------------------------------------------------------------------
		cv::Mat imageRGB,  image_depth3;
		int entrada =0;
		int salida =0;
		int dentro =0;
		for(unsigned int i=0;i<media.size(); i++)
		{
			string imgname=PATH_RGB;
			char cbuff[20];
			sprintf (cbuff, "%06d", media[i].frame); //variar los 6 ceros
			imgname.append(cbuff);
			imgname.append(".png");
			imageRGB = imread(imgname , CV_LOAD_IMAGE_COLOR);   // lee la imagen
	//---------------------------------------------------------------------------------------------------
	// Carga de imagenes depth
	//---------------------------------------------------------------------------------------------------
			string imgname2=PATH_DEPTH;
			imgname2.append(cbuff);
			imgname2.append(".png");
			image_depth3 = imread(imgname2 ,  CV_LOAD_IMAGE_ANYCOLOR | CV_LOAD_IMAGE_ANYDEPTH);

	//---------------------------------------------------------------------------------------------------
	// cago imagenes guardas y  procesadas
	//---------------------------------------------------------------------------------------------------
			if( !imageRGB.empty() & !image_depth3.empty() )
				{
					Mat rot, rot_depth;
					rot = rotate(imageRGB, ANGULO_ROTACION); // llamada de la funcion de rotacion de imagen
					imageRGB=rot;
					if (waitKey(1) == 27)
							{	// se puede cambiar en funcion de mi tiempo de procesado deberia bajarlo
									waitKey(0);
							}

	//-----------------------------------------------------------------------------------------------------
	//Encontrar la personas dentro
	//-----------------------------------------------------------------------------------------------------

			//		for(unsigned int i=0;i<media.size(); i++) // miro el vector
			//		{
						if (media[i].detReal != 0 && media[i-1].detReal == 0)
						{
							if(media[i].direccion==1)
							{
								entrada++;
	//							cout << "frame="<< media[i].frame << "entrada "<< entrada << std::endl ;
							}
							else if(media[i].direccion ==-1)
							{
								salida++;
	//							cout << "frame="<< media[i].frame << "salida "<< salida<< std::endl ;
							}
							//dentro=entrada-salida;
						}

			//		}

					dentro=entrada-salida;
	//---------------------------------------------------------------------------------------------------
	// cuadros de texto para escribir los resultados
	//---------------------------------------------------------------------------------------------------
					string box_text_1 = format("frame = %d ", media[i].frame);
					string box_text_2 = format("direccion = %d ", media[i].direccion);
					string box_text_3 = format("entra = %d ", entrada);
					string box_text_4 = format("sale = %d ", salida);
					string box_text_5 = format("dentro de la sala = %d ", dentro);
					int pos_x1 = 50;
					int pos_y1 = 50;
					int pos_x2 = 50;
					int pos_y2 = 70;
					int pos_x3 = 50;
					int pos_y3 = 90;
					int pos_x4 = 50;
					int pos_y4 = 110;
					int pos_x5 = 50;
					int pos_y5 = 130;
					// And now put it into the image:
					putText(imageRGB, box_text_1, Point(pos_x1, pos_y1), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(imageRGB, box_text_2, Point(pos_x2, pos_y2), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(imageRGB, box_text_3, Point(pos_x3, pos_y3), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(imageRGB, box_text_4, Point(pos_x4, pos_y4), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(imageRGB, box_text_5, Point(pos_x5, pos_y5), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					cout << "frame="<< media[i].frame<< "direccion"<< media[i].direccion<< "entrada"<< entrada<< "salida"<< salida<<"dentro"<< dentro <<"DETECCION "<<media[i].detReal<< std::endl ;
					rectangle(imageRGB, media[i].intersec.tl(), media[i].intersec.br(), cv::Scalar(0,255,0), 2);
					imshow("video capture", imageRGB);
	//---------------------------------------------------------------------------------------------------
	// Rotar el DEPTH
	//---------------------------------------------------------------------------------------------------
					rot_depth=rotate(image_depth3, ANGULO_ROTACION);
					image_depth3=rot_depth;

					if (waitKey(1) == 27)
							{	// se puede cambiar en funcion de mi tiempo de procesado deberia bajarlo
									waitKey(0);
									i=0;
							}
	//---------------------------------------------------------------------------------------------------
	// cuadros de texto para escribir los resultados en DEPTH
	//---------------------------------------------------------------------------------------------------
					cv::Mat falseColorsMap;
					double min;
					double max;
					cv::minMaxIdx(image_depth3, &min, &max);
					cv::Mat adjMap;
					// Histogram Equalization
					float scale = 255 / (max-min);
					image_depth3.convertTo(adjMap,CV_8UC1,scale, -min*scale);
					applyColorMap(adjMap, falseColorsMap, cv::COLORMAP_JET);
					string box_text_6 = format("frame = %d ", media[i].frame);
					string box_text_7 = format("media del rectangulo =  %4.2f ", media[i].media_depth);
					string box_text_8 = format("entra = %d ", entrada);
					string box_text_9 = format("sale = %d ", salida);
					string box_text_10 = format("dentro de la sala = %d ", dentro);
					int pos_xdepth1 = 50;
					int pos_ydepth1 = 50;
					int pos_xdepth2 = 50;
					int pos_ydepth2 = 70;
					int pos_xdepth3 = 50;
					int pos_ydepth3 = 90;
					int pos_xdepth4 = 50;
					int pos_ydepth4 = 110;
					int pos_xdepth5 = 50;
					int pos_ydepth5 = 130;
					// And now put it into the image:
					putText(falseColorsMap, box_text_6, Point(pos_xdepth1, pos_ydepth1), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(falseColorsMap, box_text_7, Point(pos_xdepth2, pos_ydepth2), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(falseColorsMap, box_text_8, Point(pos_xdepth3, pos_ydepth3), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(falseColorsMap, box_text_9, Point(pos_xdepth4, pos_ydepth4), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);
					putText(falseColorsMap, box_text_10, Point(pos_xdepth5, pos_ydepth5), FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0,255,0), 2.0);

					imshow("video capture DEPTH", falseColorsMap);
				}
			else
				{
					printf(" --(!) No imagen -- Break!");
				}
		}

//--------------------------------------------------------------------------------------------------------------------------------
	return 0;
}

//cout << "(^.^)"<< std::endl ;

